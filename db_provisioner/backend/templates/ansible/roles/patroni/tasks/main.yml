---
- name: Ensure Patroni PostgreSQL data directory exists
  file:
    path: "{{ data_mount_point }}/pgdata"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Ensure WAL archive directory exists
  file:
    path: "{{ wal_mount_point }}/archive"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'

- name: Ensure correct ownership recursively on {{ data_mount_point }}
  command: chown -R postgres:postgres {{ data_mount_point }}
  become: true

- name: Ensure correct ownership recursively on {{ wal_mount_point }}
  command: chown -R postgres:postgres {{ wal_mount_point }}
  become: true

- name: Ensure stats_temp_directory exists and owned by postgres
  file:
    path: /var/lib/pgsql_stats_tmp
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'

- name: Clean pgdata.failed if bootstrap previously failed
  file:
    path: "{{ data_mount_point }}/pgdata.failed"
    state: absent
  ignore_errors: true
  when: ansible_facts['distribution'] is defined

- name: Recreate clean pgdata directory after removal
  file:
    path: "{{ data_mount_point }}/pgdata"
    state: directory
    owner: postgres
    group: postgres
    mode: '0700'
  ignore_errors: true
  when: ansible_facts['distribution'] is defined

# - name: Generate passwords only on the first PostgreSQL node
#   set_fact:
#     generated_superuser_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,@#_+!') }}"
#     generated_replication_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits,@#_+!') }}"
#   when: inventory_hostname == groups['postgresql'][0]

# - name: Set shared replication and superuser passwords for all nodes
#   set_fact:
#     patroni_superuser_password: "{{ hostvars[groups['postgresql'][0]].generated_superuser_password }}"
#     patroni_replication_password: "{{ hostvars[groups['postgresql'][0]].generated_replication_password }}"

- name: Output Patroni superuser and replication passwords
  debug:
    msg: |
      Patroni superuser password (postgres): {{ patroni_superuser_password }}
      Patroni replication password (replicator): {{ patroni_replication_password }}
  when: inventory_hostname == groups['postgresql'][0]

- name: Write Patroni passwords to local file
  delegate_to: localhost
  run_once: true
  become: false
  copy:
    dest: ./patroni_passwords.txt
    content: |
      Patroni superuser password (postgres): {{ patroni_superuser_password }}
      Patroni replication password (replicator): {{ patroni_replication_password }}


- name: Install Patroni
  pip:
    name: patroni[etcd]
    executable: pip3

- name: Create Patroni config directory
  file:
    path: /etc/patroni
    state: directory
    owner: postgres
    group: postgres
    mode: '0755'

- name: Identify the bootstrap node
  set_fact:
    bootstrap_node: true
  when: inventory_hostname == groups['postgresql'][0]

- name: Generate patroni configuration file
  template:
    src: config.yml.j2
    dest: /etc/patroni/config.yml
    owner: postgres
    group: postgres
    mode: '0640'

- name: Create Patroni systemd service
  template:
    src: patroni.service
    dest: /etc/systemd/system/patroni.service
    owner: root
    group: root
    mode: '0644'

- name: Start and enable Patroni
  systemd:
    name: patroni
    enabled: yes
    state: started

- name: Ensure .ssh directory exists for postgres
  become: true
  become_user: postgres
  file:
    path: ~/.ssh
    state: directory
    mode: '0700'

- name: ssh connect
  import_tasks: ssh.yml