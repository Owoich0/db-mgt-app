---
- name: Start EC2 instance
  hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/all.yml

  tasks:
    - name: Get instance ID and state (excluding terminated)
      shell: |
        aws ec2 describe-instances \
          --filters "Name=tag:Name,Values={{ cluster_name }}-node-1" \
                    "Name=instance-state-name,Values=running,stopped,pending" \
          --query "Reservations[].Instances[].[InstanceId, State.Name, PublicIpAddress]" \
          --output text
      register: instance_info

    - name: Parse instance info
      set_fact:
        instance_id: "{{ instance_info.stdout.split()[0] }}"
        instance_state: "{{ instance_info.stdout.split()[1] | lower }}"
        new_public_ip: "{{ instance_info.stdout.split()[2] }}"

    - name: Update ansible_host IP only for this host
      lineinfile:
        path: inventory/inventory.ini
        regexp: '^({{ inventory_hostname }} .*ansible_host=)[^ ]+'
        line: '\1{{ new_public_ip }}'
        backrefs: yes

    - name: Update public_ip_1 in SQLite DB
      delegate_to: localhost
      run_once: true
      shell: >
        python3 -c "import sqlite3; conn = sqlite3.connect('/Users/mac/Documents/E-Library/Automation/dbLifeMgt/db_provisioner/backend/clusters.db'); cursor = conn.cursor(); cursor.execute('UPDATE clusters SET public_ip_1=? WHERE cluster_name=?', ('{{ new_public_ip }}', '{{ cluster_name }}')); conn.commit(); conn.close()"

    - name: Print current instance state
      debug:
        msg: "Instance {{ instance_id }} is currently {{ instance_state }}"

    - name: Fail if instance is terminated
      when: instance_state == 'terminated'
      fail:
        msg: "Instance {{ instance_id }} is terminated and cannot be started. Please re-provision."

    - name: Skip start if already running
      when: instance_state == 'running'
      debug:
        msg: "Instance is already running. Skipping start."

    - name: Start instance if stopped
      when: instance_state == 'stopped'
      shell: aws ec2 start-instances --instance-ids {{ instance_id }}

    - name: Wait for running state if instance was stopped
      when: instance_state == 'stopped'
      shell: aws ec2 wait instance-running --instance-ids {{ instance_id }}

    - name: Wait for SSH to be available
      wait_for:
        port: 22
        host: "{{ new_public_ip }}"
        timeout: 180
